{"version":3,"sources":["logo.svg","Task.js","ObjectCreator.js","DayTasks.js","AddTask.js","Schedule.js","Register.js","Login.js","GoogleSignIn.js","DisplayUser.js","App.js","reportWebVitals.js","index.js"],"names":["Task","timeToComplete","title","dueDate","onClick","desc","priority","taskId","makeTasksObject","rawTasks","tasks","Map","rawTask","task","time","remainingTime","remaining_time","description","startDate","start_date","due_date","task_id","has","get","push","set","DayTasks","date","setTasksState","completedState","token","setCompletedState","map","fetch","method","headers","body","JSON","stringify","then","res","json","data","getFormattedDate","getFullYear","getMonth","getDate","AddTask","roundTime","useState","Date","setStartDate","setDueDate","name","setName","totalTime","setTotalTime","setDescription","prio","setPrio","onChange","e","target","value","type","parseInt","selected","timestamp","now","formattedStartDate","formattedDueDate","Math","ceil","convertStringToDate","substring","dayDiff","endDate","date1","date2","abs","generateSchedule","size","minDate","maxDate","buckets","taskItems","tasksPerBucket","bucketsPerTask","dateTasks","availableBuckets","undefined","i","bucket","setDate","round","newTask","totalBuckets","sort","first","second","entries","length","j","splice","newSchedule","schedule","copy","taskTimes","newDateTasks","compressSchedule","Schedule","setSchedule","scheduleDates","forEach","Register","setLogin","setToken","setTaskState","username","setUsername","password","setPassword","tempToken","setTempToken","_","Login","status","alert","GoogleSignIn","onSignIn","googleUser","id_token","getAuthResponse","console","log","useEffect","window","gapi","signin2","render","id","DisplayUser","setTokenState","showLogin","setShowLogin","App","setTasks","minTime","completedTasks","setCompletedTasks","taskDates","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.df68d3e2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","// Task should have estimated time to completion / target time that user wants to work on task\n// Task can be marked with no due date, app will suggest times to work on it when there is a \"free\" day\nfunction Task({timeToComplete, dueDate, title, desc, priority, onClick, taskId}) {\n    // Need checkbox in this component\n    return (\n        <div onClick = {onClick}>\n            <table>\n                <tr>\n                    <th>{title}</th>\n                    <td>{timeToComplete} min</td>\n                </tr>\n            </table>\n        </div>\n    );\n}\nexport default Task;","function makeTasksObject(rawTasks) {\n  /**\n   * Given an array of tasks, make a tasks object for setState.\n   */\n  let tasks = new Map();\n  for (let rawTask of rawTasks) {\n    let task = {\n      time: rawTask.time,\n      remainingTime: rawTask.remaining_time,\n      title: rawTask.title,\n      desc: rawTask.description,\n      priority: rawTask.priority,\n      startDate: rawTask.start_date,\n      dueDate: rawTask.due_date,\n      taskId: rawTask.task_id\n    };\n\n    if (tasks.has(rawTask.due_date)) {\n      tasks.get(rawTask.due_date).push(task);\n    }\n    else {\n      tasks.set(rawTask.due_date, [task])\n    }\n  }\n  return tasks;\n}\n\nexport {makeTasksObject};","// Given a date and an array of tasks for that date, return a disaply for a \n// section of tasks for that day\nimport Task from './Task.js';\nimport {makeTasksObject} from './ObjectCreator.js';\n\nfunction DayTasks({date, tasks, completedState, setTasksState, setCompletedState, token}) {\n    return (\n        <div>\n        <div>{date}</div>\n        {tasks.map(\n            task => <Task \n            timeToComplete={task.time} \n            dueDate={date} \n            title={task.title} \n            desc={task.desc} \n            priority={task.priority} \n            onClick={()=>{\n\n                fetch(`https://duit-api.herokuapp.com/update/deltask?token=${token}`, {\n                    method: 'PUT',\n                    headers: {\n                        'Accept': 'application/json',\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        taskId: task.taskId\n                    })\n                })\n                .then(res => res.json())\n                .then(data => setTasksState(makeTasksObject(data)));\n                // fetch and set completed state\n            }} \n            key={task.taskId} \n            taskId={task.taskId}\n            />\n            )}\n        </div>\n    )\n}\n\nexport default DayTasks;","// This component creates a new task object and passes it into a helper function./\nimport React, {useState} from 'react';\nimport DatePicker from 'react-datepicker';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport {makeTasksObject} from './ObjectCreator.js';\n\n\nfunction getFormattedDate(date) {\n    return '' + date.getFullYear()+'/'+(date.getMonth() > 8 ? ''+(date.getMonth()+1): '0'+(date.getMonth()+1))+'/'+(date.getDate() > 9 ? ''+date.getDate(): '0'+date.getDate())\n}\n\nfunction AddTask({ roundTime, setTasksState, token}) {\n    const [startDate, setStartDate] = useState(new Date());\n    const [dueDate, setDueDate] = useState(new Date());\n    const [name, setName] = useState('');\n    const [totalTime, setTotalTime] = useState(0);\n    const [description, setDescription] = useState('');\n    const [prio, setPrio] = useState(0);\n    \n    \n    return (\n        <div>\n            <p>Add new task</p>\n            <input onChange={e => setName(e.target.value)}/>\n            <input onChange={e => setDescription(e.target.value)}/>\n            <input type='number' onChange={e => setTotalTime(parseInt(e.target.value))}/>\n            <input type='number' onChange={e=> setPrio(parseInt(e.target.value))}/>\n            <DatePicker selected={startDate} onChange={(date) => setStartDate(date)} />\n            <DatePicker selected={dueDate} onChange={(date)=>setDueDate(date)} />\n            <button \n                type='button' \n                onClick={() => {\n                    let timestamp = Date.now();\n                    let formattedStartDate = getFormattedDate(startDate);\n                    let formattedDueDate = getFormattedDate(dueDate);\n                    fetch(`https://duit-api.herokuapp.com/update/addtask?token=${token}`, {\n                        method: 'POST',\n                        headers: {\n                            'Accept': 'application/json',\n                            'Content-Type': 'application/json'\n                        },\n                        body: JSON.stringify({\n                            time:Math.ceil(totalTime/roundTime)*roundTime,\n                            remainingTime: Math.ceil(totalTime/roundTime)*roundTime,\n                            title:name, \n                            desc:description, \n                            priority: prio,\n                            startDate: formattedStartDate,\n                            dueDate: formattedDueDate,\n                            taskId: timestamp\n                        })\n                    })\n                    .then(res => res.json())\n                    .then(data => setTasksState(makeTasksObject(data)));\n                    //else alert('Start date must be the same day or earlier than the due date.');\n                    // removed this line because do not want setstate in conditional \n                }\n                }\n            >\n                Add Task\n            </button>\n        </div>\n    )\n}\nexport {getFormattedDate};\nexport default AddTask;","import React, {useState} from 'react';\nimport ScheduleDayTasks from './DayTasks.js';\nimport {getFormattedDate} from './AddTask.js';\n\nfunction convertStringToDate(date) {\n    return new Date(date.substring(5,7)+'/'+date.substring(8,10)+'/'+date.substring(0,4));\n}\n\nfunction dayDiff(startDate, endDate) {\n    let date1 = convertStringToDate(startDate);\n    let date2 = convertStringToDate(endDate);\n    return Math.ceil(Math.abs(date2 - date1) / (1000 * 60 * 60 * 24)); \n}\nfunction compressSchedule(schedule) {\n/**\n * Given a schedule Map, return a Map with identical task objects combined into a single object with combined times.\n */\n    let copy = new Map();\n    for (let [date, dateTasks] of schedule) {\n        if (dateTasks.length > 0) {\n            let taskTimes= new Map();\n            for (let task of dateTasks) {\n                if (taskTimes.has(task.taskId)) taskTimes.set(task.taskId, [task, taskTimes.get(task.taskId)[1]+task.time]);\n                else taskTimes.set(task.taskId, [task, task.time]);\n            }\n            let newDateTasks = [];\n            for (let [taskId, totalTime] of taskTimes) {\n                let newTask = {...totalTime[0]};\n                newTask['time'] = totalTime[1];\n                newDateTasks.push(newTask);\n            }\n            copy.set(date, newDateTasks);\n        }\n        \n\n    }\n    return copy;\n}\n\nfunction generateSchedule(tasks, roundTime) {\n    /**\n     * Given a Map with dates as keys and arrays of task objects as values, return a Map of the same type with the tasks redistributed.\n     */\n    if (tasks.size > 0) {\n        let buckets = new Map();\n        let taskItems = [];\n        let tasksPerBucket = new Map();\n        let bucketsPerTask = new Map();\n        let minDate;\n        let maxDate;\n        for (let [date, dateTasks] of tasks) {\n            for (let task of dateTasks) {\n                let availableBuckets = dayDiff(task.startDate, task.dueDate)+1\n                bucketsPerTask.set(task.taskId, availableBuckets);\n                if (minDate==undefined || minDate > task.startDate) minDate = task.startDate;\n                if (maxDate==undefined || maxDate <task.dueDate) maxDate = task.dueDate;\n                \n                for (let i = 0; i < availableBuckets; i++) {\n                    let bucket = convertStringToDate(task.startDate);\n                    bucket.setDate(bucket.getDate()+i);\n                    bucket = getFormattedDate(bucket);\n                    if (tasksPerBucket.has(bucket)) tasksPerBucket.set(bucket, tasksPerBucket.get(bucket)+Math.round(task.time/roundTime));\n                    else tasksPerBucket.set(bucket, Math.round(task.time/roundTime));\n                }\n                for (let i = 0; i < Math.round(task.time/roundTime);i++) {\n                    let newTask = {...task};\n                    newTask['time'] = roundTime;\n                    delete newTask.onClick;\n                    taskItems.push(newTask);\n                }\n            }\n        }\n        let totalBuckets = dayDiff(minDate, maxDate)+1\n        for (let i = 0; i < totalBuckets; i++) {\n            let bucket = convertStringToDate(minDate);\n            bucket.setDate(bucket.getDate()+i)\n            bucket = getFormattedDate(bucket);\n            buckets.set(bucket, [])\n        }\n        \n        taskItems.sort((first, second) => {return bucketsPerTask.get(first.taskId)>bucketsPerTask.get(second.taskId) ? 1 : -1});\n        tasksPerBucket = new Map([...tasksPerBucket.entries()].sort((first, second) => {return first[1]>second[1] ? 1: -1}));\n        let i = 0;\n        \n        while (taskItems.length>0) {\n            let bucket = convertStringToDate(minDate);\n            bucket.setDate(bucket.getDate()+i)\n            bucket = getFormattedDate(bucket);\n            if (tasksPerBucket.has(bucket) && tasksPerBucket.get(bucket)>0 ) {\n                for (let j = 0; j < taskItems.length; j++) {\n                    if (taskItems[j].startDate <= bucket && bucket <= taskItems[j].dueDate){\n                        buckets.get(bucket).push(taskItems[j]);\n                        taskItems.splice(j, 1);\n                        break;\n                    }\n                }\n                tasksPerBucket.set(bucket, tasksPerBucket.get(bucket)-1)\n            }\n            i = (i+1)%totalBuckets;\n        }\n        \n        let newSchedule = new Map();\n        for (let [date, dateTasks] of buckets) {\n            if (dateTasks.length > 0) newSchedule.set(date, dateTasks);\n        }\n        return compressSchedule(newSchedule);\n    }\n    else return new Map();\n}\n\nfunction Schedule({tasks, roundTime}) {\n    const [schedule, setSchedule] = useState(new Map());\n\n    let scheduleDates = [];\n    schedule.forEach((dateTasks, date) => scheduleDates.push(<ScheduleDayTasks date={date} tasks={dateTasks} key={'s'+date}/>))\n\n\n    return (\n        <div>\n            <button onClick={() => setSchedule(generateSchedule(tasks, roundTime))}>\n                Generate new schedule\n            </button>\n            {scheduleDates}\n        </div>\n    );\n}\n\nexport default Schedule;","import React, {useState} from 'react';\nimport {makeTasksObject} from './ObjectCreator.js';\n\nfunction Register ({setLogin, setToken, setTaskState}) {\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [tempToken, setTempToken] = useState('');\n    return (\n        <div>\n            <button type='button' onClick={()=>setLogin()}>Log in with an existing account</button>\n            <p>Register</p>\n            <p>Username</p>\n            <input onChange={e => setUsername(e.target.value)}/>\n            <p>Password</p>\n            <input onChange={e => setPassword(e.target.value)}/>\n            <button type='button' onClick={() => {\n                fetch('https://duit-api.herokuapp.com/auth/register', {\n                    method: 'POST',\n                    headers: {\n                        'Accept': 'application/json',\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({username: username, password: password})\n                })\n                .then(res => res.json())\n                .then(data => {\n                    setToken(data.token);\n                    setTempToken(data.token);\n                })\n                .then(_ => fetch(`https://duit-api.herokuapp.com/update/tasks?token=${tempToken}`))\n                .then(res => res.json())\n                .then(data => setTaskState(makeTasksObject(data)))\n            }}>\n                Register\n            </button>\n        </div>\n    );\n}\nexport default Register;","import React, {useState} from 'react';\nimport {makeTasksObject} from './ObjectCreator.js';\n\n\nfunction Login({setLogin, setToken, setTaskState}) {\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [tempToken, setTempToken] = useState('');\n    return (\n        <div>\n            <button type='button' onClick={()=>setLogin()}>Create an account</button>\n            <p>Login</p>\n            <p>Username</p>\n            <input onChange={e => setUsername(e.target.value)}/>\n            <p>Password</p>\n            <input onChange={e => setPassword(e.target.value)}/>\n            <button type='button' onClick={() => {\n                fetch(`https://duit-api.herokuapp.com/auth/login?username=${username}&password=${password}`)\n                .then(res => {\n                    if (res.status!=401){\n                        return res.json()\n                    }\n                    else {\n                        alert('Incorrect credentials');\n                        return {token: ''};\n                    }\n                })\n                .then(data => {\n                    setToken(data.token);\n                    setTempToken(data.token);\n                })\n                .then(_ => fetch(`https://duit-api.herokuapp.com/update/tasks?token=${tempToken}`))\n                .then(res => res.json())\n                .then(data => setTaskState(makeTasksObject(data)))\n            }}>\n                Log in\n            </button>\n        </div>\n    );\n}\n\nexport default Login;","import React, {useState, useEffect} from 'react';\nimport {makeTasksObject} from './ObjectCreator.js';\n\nfunction GoogleSignIn ({setToken, setTaskState}) {\n    const [tempToken, setTempToken] = useState('');\n\n    function onSignIn(googleUser) {\n\n        var id_token = googleUser.getAuthResponse().id_token;\n        // send Google ID token to server, get response and set token (same format as login request in Login.js)\n        fetch('https://duit-api.herokuapp.com/auth/login-google', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({token: id_token})\n        })\n        .then(res => res.json())\n        .then(data => {\n            console.log(data.token);\n            setToken(data.token);\n            setTempToken(data.token);\n        })\n        .then(_ => fetch(`https://duit-api.herokuapp.com/update/tasks?token=${tempToken}`))\n        .then(res => res.json())\n        .then(data => setTaskState(makeTasksObject(data)))\n    }\n\n    \n    useEffect(() => {\n        window.gapi.signin2.render('g-signin2', {\n          'scope': 'https://www.googleapis.com/auth/plus.login',\n          'width': 200,\n          'height': 50,\n          'longtitle': true,\n          'theme': 'dark',\n          'onsuccess': onSignIn\n        })\n      })\n    return (\n        <div>\n        <div id=\"g-signin2\" data-onsuccess={onSignIn}></div>\n        </div>\n    );\n}\n\nexport default GoogleSignIn;","//Show \"Hello, ___\" instead of login/register when logged in\nimport React, {useState} from 'react';\nimport Register from './Register.js';\nimport Login from './Login.js';\nimport GoogleSignIn from './GoogleSignIn.js';\n\n\nfunction DisplayUser({setTokenState, setTasksState}) {\n    const [showLogin, setShowLogin] = useState(true);\n    return (\n        <div>\n            <GoogleSignIn \n                setToken={setTokenState} \n                setTaskState={setTasksState}\n            />\n            {showLogin ? <Login \n                setLogin={() => setShowLogin(false)} \n                setToken={setTokenState} \n                setTaskState={setTasksState}\n                /> \n                : \n                <Register \n                setLogin={() => setShowLogin(true)}\n                setToken={setTokenState} \n                setTaskState={setTasksState}\n                />}\n        </div>\n    );\n}\n\nexport default DisplayUser;","\nimport logo from './logo.svg';\nimport './App.css';\nimport DayTasks from './DayTasks.js';\nimport AddTask from './AddTask.js';\nimport React, {useState} from 'react';\nimport Schedule from './Schedule.js';\nimport DisplayUser from './DisplayUser';\nfunction App() {\n  const [tasks, setTasks] = useState(new Map());\n  const [minTime, setMinTime] = useState(30);\n  const [completedTasks, setCompletedTasks] = useState(new Map());\n  const [reminders, setReminders] = useState([]);\n  const [token, setToken] = useState('');\n\n  let taskDates = [];\n  tasks.forEach((dateTasks, date) => taskDates.push(<DayTasks date={date} tasks={dateTasks} key={date} completedState={completedTasks} setTasksState={setTasks} setCompletedState={setCompletedTasks} token={token}/>))\n\n  //let completedTaskDates = [];\n  //completedTasks.forEach((dateTasks, date) => completedTaskDates.push(<DayTasks date={date} tasks={dateTasks} key={date} tasksState = {tasks} completedState={completedTasks} setTasksState={setTasks} setCompletedState={setCompletedTasks}/>))\n\n  return (\n    <div className=\"App\">\n      <DisplayUser setTokenState = {setToken} setTasksState = {setTasks}/>\n      <AddTask \n        roundTime={minTime} \n        setTasksState={setTasks} \n        token={token}\n      />\n      {taskDates}\n      <Schedule tasks={tasks} roundTime={minTime}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}